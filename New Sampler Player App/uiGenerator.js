// uiGenerator.js
import { summaryData } from './summary.js';

/**
 * Capitalizes the first letter of a string.
 * @param {string} str
 * @returns {string}
 */
const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);

/**
 * Dynamically generates instrument settings based on summary data.
 */
export function generateInstrumentSettings() {
  const instrumentSettingsDiv = document.getElementById('instrumentSettings');
  if (!instrumentSettingsDiv) return;

  // Get all instruments from summary data
  const allInstruments = Object.values(summaryData.instrumentsByCategory).flat();

  // Remove duplicates, if any
  const uniqueInstruments = [...new Set(allInstruments)];

  uniqueInstruments.forEach(instrument => {
    const capitalized = capitalize(instrument);

    // Create enable checkbox
    const enableLabel = document.createElement('label');
    const enableCheckbox = document.createElement('input');
    enableCheckbox.type = 'checkbox';
    enableCheckbox.id = `enable${capitalized}`;
    enableCheckbox.checked = true;
    enableLabel.appendChild(enableCheckbox);
    enableLabel.appendChild(document.createTextNode(` Enable ${capitalized}`));
    instrumentSettingsDiv.appendChild(enableLabel);

    // Create probability input
    const probabilityLabel = document.createElement('label');
    probabilityLabel.textContent = `${capitalized} Probability: `;
    const probabilityInput = document.createElement('input');
    probabilityInput.type = 'number';
    probabilityInput.id = `${instrument.toLowerCase()}Probability`;
    probabilityInput.value = '0.5'; // Default value, can be adjusted
    probabilityInput.min = '0';
    probabilityInput.max = '1';
    probabilityInput.step = '0.1';
    probabilityLabel.appendChild(probabilityInput);
    instrumentSettingsDiv.appendChild(probabilityLabel);
  });
}

// Initialize the UI when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  generateInstrumentSettings();
});

/** Dev notes for uiGenerator.js
 * Notes for uiGenerator.js
Overview:
The uiGenerator.js module dynamically generates user interface elements for controlling instrument settings based on the summary data of available samples. It creates checkboxes for enabling/disabling instruments and number inputs for adjusting their probabilities. The UI elements are appended to a specified container (instrumentSettings), making it possible to interact with the instrument settings directly through the interface.

Key Features:

Dynamic UI Creation: Based on the summary data, the module generates UI components for each instrument.

Enable Checkbox: A checkbox to toggle the activation of an instrument.
Probability Input: An input field for setting the probability of an instrument being played, with values between 0 and 1.
Automatically Populates Settings: The settings UI is populated when the DOM is loaded, and the user can interact with the settings directly.

Functionality:

generateInstrumentSettings():

Purpose: This function dynamically generates UI components for each instrument in the sample library.
Process:
It retrieves all instruments from the summaryData.instrumentsByCategory structure.
Ensures each instrument is displayed only once, even if it appears in multiple categories.
For each unique instrument:
Creates a checkbox that enables or disables the instrument.
Creates a probability input field, allowing users to set the likelihood of the instrument being played.
UI Elements: These are added to the instrumentSettings div in the HTML document.
DOMContentLoaded Listener:

Purpose: Ensures that the generateInstrumentSettings() function is called as soon as the DOM is fully loaded, allowing the UI components to be created dynamically based on the summary data.
Notes:

This module provides an interactive interface for users to configure instrument settings such as enabling/disabling instruments and setting the probability of their use in the generated beat patterns.
It is useful for dynamically adjusting the behavior of a beat generator or any sample-based music composition tool.
Usage:

Integration: The UI elements created by this module can be integrated into any web application where the user needs to adjust instrument settings.
Customization: Developers can modify the layout or add new input types to control additional settings, such as tempo variants, swing amount, or other sample properties.
Key Considerations:

The UI generation depends on the structure and content of summaryData, which is dynamically generated by summary.js. Therefore, this module should be used in conjunction with the summary.js module to ensure it has access to the latest sample data.
 */



/** ### Condensed Version for AI Assistant (uiGenerator.js)

**`uiGenerator.js` Summary:**
Dynamically generates user interface elements for controlling instrument settings (enable/disable, probability) based on sample summary data. The UI elements are appended to a specified container for user interaction.

**Key Features:**
- **Dynamic UI Creation**: Generates UI components for each instrument based on summary data.
- **Enable Checkbox**: Toggles instrument activation.
- **Probability Input**: Adjusts the probability of an instrument being played (0â€“1).
- **Automatic Population**: Populates settings UI when the DOM is loaded.

**Core Functionality:**
- **`generateInstrumentSettings()`**: 
  - Retrieves instruments from `summaryData.instrumentsByCategory`.
  - Displays each instrument once, even if it appears in multiple categories.
  - Creates checkboxes and probability input fields for each unique instrument.
  - Adds the UI elements to `instrumentSettings` container.
  
- **DOMContentLoaded Listener**: Ensures `generateInstrumentSettings()` is called after the DOM is loaded, creating the UI dynamically.

**Developer Notes:**
- **UI Integration**: Integrates into any web app for adjusting instrument settings.
- **Customization**: Developers can modify layout or add more input types for other settings like tempo variants or swing.
- **Dependency**: Relies on `summaryData` from `summary.js` for the latest sample data.

This module allows for dynamic and interactive adjustments to instrument settings, making it ideal for sample-based music composition tools and beat generators. */